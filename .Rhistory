a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
library(fpp3)
library(fpp3)
library(tsibbledata)
library(flextable)
library(readxl)
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
rlang::last_trace()
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
?PBS
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
PBS
PBS
a10 <- PBS %>%
filter(ATC2 == "A10") %>%
select(Month, Concession, Type, Cost) %>%
summarise(Cost = sum(Cost)) %>%
mutate(Cost = Cost / 1e6)
a10.past <- a10 %>%
filter(year(Month) < 2006)
a10.future <- a10 %>%
filter(year(Month) >= 2006)
a10.fit <- a10.past %>%
model(ETS(Cost))
a10.fct <- a10.fit %>%
forecast(h = 30)
accuracy(a10.fct, a10.future)
summary(a10.past$Cost)
sd(a10.past$Cost)
fct.comparison <- data.frame(Period = a10.future$Month,
Cost = a10.future$Cost,
Cost_Fct = a10.fct$.mean)
names(fct.comparison) <- c("Period", "Cost", "Cost_Fct")
fct.comparison <- fct.comparison %>%
mutate(Error = Cost_Fct - Cost)
fct.comparison
a10.fct %>% autoplot(a10, level = NULL) +
guides(colour=guide_legend(title = "Forecast"))
Windows()
windows()
a10.fct %>% autoplot(a10, level = NULL) +
guides(colour=guide_legend(title = "Forecast"))
a10.subset <- a10 %>%
filter(Month < yearmonth("2000-01-01") |
Month >= yearmonth("2001-01-01"))
a10.subset %>% autoplot(Cost)
windows()
a10.subset %>% autoplot(Cost)
a10.subset.fit <-a10.subset %>%  model(
M1 = ETS(Cost)
)
a10.fill <- a10.subset %>% fill_gaps()
a10.fill %>% autoplot(Cost)
a10.fill.fit <- a10.fill %>%
model(
M1 = ETS(Cost)
)
a10.fill <- a10.subset %>% fill_gaps(.method = "linear")
library(rvest)
install.packages("rvest")
library(rvest)
library(stringr)
library(ggplot2)
library(MASS)
url <- "https://www.anibis.ch/fr/q/mobilier/Ak6dMaXQgMTQwqWZ1cm5pdHVyZZSRkqljb21wYW55QWSncHJpdmF0ZcDAwA?sorting=newest&page=1&query=Lit+140"
website <- read_html(url)
website
# Define the function h(x)
cone_radius <- function(x) {
if (x < 0) {
return(0)
} else if (x >= 0 && x < 8) {
return(x / 8)
} else if (x >= 8 && x < (8 + pi / 2)) {
return(1 + 1.5 * sin(x - 8))
} else if (x >= (8 + pi / 2) && x < 10) {
return(2.5 - 2 * cos(x - 8))
} else {
return(0)
}
}
# Example usage of the function with different values of x
cone_radius(5)   # Should return x / 8, as 0 <= x < 8
cone_radius(9)   # Should return 1 + 1.5 * sin(x - 8), as 8 <= x < 8 + pi/2
cone_radius(10)  # Should return 2.5 - 2 * cos(x - 8), as 8 + pi/2 <= x < 10
cone_radius(11)  # Should return 0, as x >= 10
# 1. Vectorization using a for loop
cone_radius_for <- function(x) {
result <- numeric(length(x))
for (i in seq_along(x)) {
result[i] <- cone_radius(x[i])
}
return(result)
}
# 2. Vectorization using map function from purrr package
library(purrr)
cone_radius_map <- function(x) {
map_dbl(x, cone_radius)
}
# 3. Vectorization using sapply
cone_radius_sapply <- function(x) {
sapply(x, cone_radius)
}
# 4. Vectorization using Vectorize function
cone_radius_vectorize <- Vectorize(cone_radius)
library(microbenchmark)
# Performance comparison
x_values <- seq(-1, 11, length.out = 1000)  # Input values for testing
benchmark_results <- microbenchmark(
for_loop = cone_radius_for(x_values),
map_function = cone_radius_map(x_values),
sapply_function = cone_radius_sapply(x_values),
vectorize_function = cone_radius_vectorize(x_values),
times = 100
)
# Display results
print(benchmark_results)
# Function to compute the square of the radius h(x)
cone_radius_squared <- function(x) {
cone_radius_for(x)^2
}
# Calculate volume V using integration
volume <- integrate(cone_radius_squared, lower = 0, upper = 10)$value * pi
volume
# Calculate volume V using integration
volume <- integrate(cone_radius_squared, lower = 0, upper = 10)$value * pi
volume
# Small value for derivative calculation
epsilon <- 0.0001
# Approximate derivative of h(x)
cone_radius_derivative <- function(x) {
(cone_radius_for(x + epsilon) - cone_radius_for(x)) / epsilon
}
# Integrand function for surface area formula
surface_integrand <- function(x) {
h_x <- cone_radius_for(x)
dh_dx <- cone_radius_derivative(x)
h_x * sqrt(1 + dh_dx^2)
}
# Calculate surface area S
surface_area <- integrate(surface_integrand, lower = 0, upper = 10)$value * 2 * pi
surface_area
set.seed(123)  # Set seed for reproducibility
# Weather condition parameters
temperature <- 25  # Temperature in Celsius
humidity <- 0.5    # Humidity (0-1)
pressure <- 1013   # Pressure in hPa
# Calculate mean for Poisson distribution
lambda <- exp(0.5 + 0.5 * temperature - 3 * humidity + 0.001 * pressure)
# Number of simulations
num_simulations <- 10000
# Function to add normal variation to h(x)
cone_radius_with_variation <- function(x) {
cone_radius_for(x) + rnorm(1, mean = 0, sd = 0.1)
}
# Vectors to store volumes and surface areas
volumes <- numeric(num_simulations)
surface_areas <- numeric(num_simulations)
for (i in 1:num_simulations) {
# Number of guests for the current simulation
num_guests <- rpois(1, lambda)
# Calculate total cones, accounting for some guests taking two
num_cones <- sum(sample(c(1, 2), num_guests, replace = TRUE, prob = c(0.67, 0.33)))
# Calculate volume and surface area for each cone and sum
volume <- integrate(function(x) cone_radius_with_variation(x)^2, lower = 0, upper = 10)$value * pi
surface_area <- integrate(function(x) {
h_x <- cone_radius_with_variation(x)
dh_dx <- cone_radius_derivative(x)
h_x * sqrt(1 + dh_dx^2)
}, lower = 0, upper = 10)$value * 2 * pi
volumes[i] <- volume * num_cones
surface_areas[i] <- surface_area * num_cones
}
# Calculate means and standard deviations
mean_volume <- mean(volumes)
sd_volume <- sd(volumes)
mean_surface_area <- mean(surface_areas)
sd_surface_area <- sd(surface_areas)
# Display results
cat("Mean ice cream volume:", mean_volume, "cm^3\n")
cat("Volume standard deviation:", sd_volume, "cm^3\n")
cat("Mean coating surface area:", mean_surface_area, "cm^2\n")
cat("Surface area standard deviation:", sd_surface_area, "cm^2\n")
# Calculate 99% quantile for volume and surface area
volume_99 <- quantile(volumes, 0.99)
surface_area_99 <- quantile(surface_areas, 0.99)
cat("Required volume for 99% probability:", volume_99, "cm^3\n")
cat("Required surface area for 99% probability:", surface_area_99, "cm^2\n")
# Plot histogram for volume distribution
hist(volumes, main = "Distribution of Ice Cream Volume", xlab = "Volume (cm^3)", breaks = 30, col = "lightblue")
# Plot histogram for surface area distribution
hist(surface_areas, main = "Distribution of Coating Surface Area", xlab = "Surface Area (cm^2)", breaks = 30, col = "lightgreen")
# Plot histogram for volume distribution
hist(volumes, main = "Distribution of Ice Cream Volume", xlab = "Volume (cm^3)", breaks = 30, col = "lightblue")
# Define the function h(x)
cone_radius <- function(x) {
if (x < 0) {
return(0)
} else if (x >= 0 && x < 8) {
return(x / 8)
} else if (x >= 8 && x < (8 + pi / 2)) {
return(1 + 1.5 * sin(x - 8))
} else if (x >= (8 + pi / 2) && x < 10) {
return(2.5 - 2 * cos(x - 8))
} else {
return(0)
}
}
# Example usage of the function with different values of x
cone_radius(5)   # Should return x / 8, as 0 <= x < 8
cone_radius(9)   # Should return 1 + 1.5 * sin(x - 8), as 8 <= x < 8 + pi/2
cone_radius(10)  # Should return 2.5 - 2 * cos(x - 8), as 8 + pi/2 <= x < 10
cone_radius(11)  # Should return 0, as x >= 10
# 1. Vectorization using a for loop
cone_radius_for <- function(x) {
result <- numeric(length(x))
for (i in seq_along(x)) {
result[i] <- cone_radius(x[i])
}
return(result)
}
# 2. Vectorization using map function from purrr package
library(purrr)
cone_radius_map <- function(x) {
map_dbl(x, cone_radius)
}
# 3. Vectorization using sapply
cone_radius_sapply <- function(x) {
sapply(x, cone_radius)
}
# 4. Vectorization using Vectorize function
cone_radius_vectorize <- Vectorize(cone_radius)
library(microbenchmark)
# Performance comparison
x_values <- seq(-1, 11, length.out = 1000)  # Input values for testing
benchmark_results <- microbenchmark(
for_loop = cone_radius_for(x_values),
map_function = cone_radius_map(x_values),
sapply_function = cone_radius_sapply(x_values),
vectorize_function = cone_radius_vectorize(x_values),
times = 100
)
# Display results
print(benchmark_results)
# Function to compute the square of the radius h(x)
cone_radius_squared <- function(x) {
cone_radius_for(x)^2
}
# Calculate volume V using integration
volume <- integrate(cone_radius_squared, lower = 0, upper = 10)$value * pi
volume
# Calculate volume V using integration
volume <- integrate(cone_radius_squared, lower = 0, upper = 10)$value * pi
volume
# Small value for derivative calculation
epsilon <- 0.0001
# Approximate derivative of h(x)
cone_radius_derivative <- function(x) {
(cone_radius_for(x + epsilon) - cone_radius_for(x)) / epsilon
}
# Integrand function for surface area formula
surface_integrand <- function(x) {
h_x <- cone_radius_for(x)
dh_dx <- cone_radius_derivative(x)
h_x * sqrt(1 + dh_dx^2)
}
# Calculate surface area S
surface_area <- integrate(surface_integrand, lower = 0, upper = 10)$value * 2 * pi
surface_area
set.seed(123)  # Set seed for reproducibility
# Weather condition parameters
temperature <- 25  # Temperature in Celsius
humidity <- 0.5    # Humidity (0-1)
pressure <- 1013   # Pressure in hPa
# Calculate mean for Poisson distribution
lambda <- exp(0.5 + 0.5 * temperature - 3 * humidity + 0.001 * pressure)
# Number of simulations
num_simulations <- 10000
# Function to add normal variation to h(x)
cone_radius_with_variation <- function(x) {
cone_radius_for(x) + rnorm(1, mean = 0, sd = 0.1)
}
# Vectors to store volumes and surface areas
volumes <- numeric(num_simulations)
surface_areas <- numeric(num_simulations)
for (i in 1:num_simulations) {
# Number of guests for the current simulation
num_guests <- rpois(1, lambda)
# Calculate total cones, accounting for some guests taking two
num_cones <- sum(sample(c(1, 2), num_guests, replace = TRUE, prob = c(0.67, 0.33)))
# Calculate volume and surface area for each cone and sum
volume <- integrate(function(x) cone_radius_with_variation(x)^2, lower = 0, upper = 10)$value * pi
surface_area <- integrate(function(x) {
h_x <- cone_radius_with_variation(x)
dh_dx <- cone_radius_derivative(x)
h_x * sqrt(1 + dh_dx^2)
}, lower = 0, upper = 10)$value * 2 * pi
volumes[i] <- volume * num_cones
surface_areas[i] <- surface_area * num_cones
}
# Calculate means and standard deviations
mean_volume <- mean(volumes)
sd_volume <- sd(volumes)
mean_surface_area <- mean(surface_areas)
sd_surface_area <- sd(surface_areas)
# Display results
cat("Mean ice cream volume:", mean_volume, "cm^3\n")
cat("Volume standard deviation:", sd_volume, "cm^3\n")
cat("Mean coating surface area:", mean_surface_area, "cm^2\n")
cat("Surface area standard deviation:", sd_surface_area, "cm^2\n")
# Calculate 99% quantile for volume and surface area
volume_99 <- quantile(volumes, 0.99)
surface_area_99 <- quantile(surface_areas, 0.99)
cat("Required volume for 99% probability:", volume_99, "cm^3\n")
cat("Required surface area for 99% probability:", surface_area_99, "cm^2\n")
# Plot histogram for volume distribution
hist(volumes, main = "Distribution of Ice Cream Volume", xlab = "Volume (cm^3)", breaks = 30, col = "lightblue")
# Plot histogram for surface area distribution
hist(surface_areas, main = "Distribution of Coating Surface Area", xlab = "Surface Area (cm^2)", breaks = 30, col = "lightgreen")
library(shiny)
library(httr)
library(ggplot2)
library(purrr)
# Function to check if the city name is valid by querying the OpenWeatherMap API.
check_city_validity <- function(city_name, api_key) {
response <- GET("http://api.openweathermap.org/data/2.5/weather", query = list(q = city_name, appid = api_key))
status <- status_code(response)
return(status == 200)
}
# Function to retrieve the 5-day weather forecast for a specified city.
get_forecast <- function(city, api_key, units = "metric") {
response <- GET("http://api.openweathermap.org/data/2.5/forecast", query = list(q = city, appid = api_key, units = units))
if (status_code(response) != 200) {
cat("Forecast request error:", status_code(response), "\n")
return(NULL)
}
forecast_data <- content(response, "parsed", simplifyDataFrame = TRUE)
return(forecast_data)
}
# OpenWeatherMap API key
api_key <- "388c46f24ed4124776271a0d7e62bbb1"
# Module UI
city_module_ui <- function(id) {
ns <- NS(id)
tagList(
textInput(ns("city"), "Enter City Name:", value = "Lausanne"),
selectInput(ns("parameter"), "Select Parameter:",
choices = c("Temperature" = "temperature", "Humidity" = "humidity", "Pressure" = "pressure"),
selected = "temperature"),
numericInput(ns("num_simulations"), "Number of Simulations:", value = 10000, min = 1),
actionButton(ns("run_simulation"), "Run Simulation"),
actionButton(ns("submit"), "Submit"),
htmlOutput(ns("current_weather")),
plotOutput(ns("forecast_plot")),
htmlOutput(ns("simulation_results")),
plotOutput(ns("volume_histogram")),
plotOutput(ns("surface_area_histogram"))
)
}
# Module Server
city_module_server <- function(id, api_key) {
moduleServer(id, function(input, output, session) {
# Fetch weather data when the 'Submit' button is clicked
weather_data <- eventReactive(input$submit, {
isolate({
city_name <- input$city
if (!check_city_validity(city_name, api_key)) {
stop("City not found in the dataset.")
}
forecast_data <- get_forecast(city = city_name, api_key = api_key)
if (is.null(forecast_data) || is.null(forecast_data$list) || nrow(forecast_data$list) == 0) {
stop("No forecast data available.")
}
dates <- as.POSIXct(forecast_data$list$dt, origin = "1970-01-01", tz = "UTC")
temps <- forecast_data$list$main$temp
humidities <- forecast_data$list$main$humidity
pressures <- forecast_data$list$main$pressure
forecast_df <- data.frame(date = dates, temperature = temps, humidity = humidities, pressure = pressures)
forecast_df
})
})
output$current_weather <- renderText({
req(weather_data())
city <- isolate(input$city)
temperature <- format(weather_data()$temperature[1], digits = 2)
humidity <- weather_data()$humidity[1]
pressure <- weather_data()$pressure[1]
HTML(
paste(
"<strong>Current weather in", city, ":</strong><br>",
"<ul>",
"<li>Temperature: ", temperature, " °C</li>",
"<li>Humidity: ", humidity, " %</li>",
"<li>Pressure: ", pressure, " hPa</li>",
"</ul>"
)
)
})
output$forecast_plot <- renderPlot({
df <- weather_data()
parameter <- isolate(input$parameter)
ggplot(df, aes(x = date)) +
geom_line(aes_string(y = parameter, color = shQuote(parameter))) +
labs(title = paste("5-Day Forecast for", isolate(input$city)), x = "Date", y = parameter, color = "Parameter") +
theme_minimal()
})
# Run simulation and display results
simulation_results <- eventReactive(input$run_simulation, {
isolate({
num_simulations <- input$num_simulations
volumes <- numeric(num_simulations)
surface_areas <- numeric(num_simulations)
for (i in 1:num_simulations) {
num_guests <- rpois(1, lambda)
num_cones <- sum(sample(c(1, 2), num_guests, replace = TRUE, prob = c(0.67, 0.33)))
volume <- integrate(function(x) cone_radius_with_variation(x)^2, lower = 0, upper = 10)$value * pi
surface_area <- integrate(function(x) {
h_x <- cone_radius_with_variation(x)
dh_dx <- cone_radius_derivative(x)
h_x * sqrt(1 + dh_dx^2)
}, lower = 0, upper = 10)$value * 2 * pi
volumes[i] <- volume * num_cones
surface_areas[i] <- surface_area * num_cones
}
mean_volume <- mean(volumes)
sd_volume <- sd(volumes)
mean_surface_area <- mean(surface_areas)
sd_surface_area <- sd(surface_areas)
volume_99 <- quantile(volumes, 0.99)
surface_area_99 <- quantile(surface_areas, 0.99)
list(mean_volume = mean_volume, sd_volume = sd_volume,
mean_surface_area = mean_surface_area, sd_surface_area = sd_surface_area,
volume_99 = volume_99, surface_area_99 = surface_area_99,
volumes = volumes, surface_areas = surface_areas)
})
})
output$simulation_results <- renderText({
req(simulation_results())
results <- simulation_results()
HTML(
paste(
"<strong>Simulation Results:</strong><br>",
"<ul>",
"<li><strong>Mean Ice Cream Volume:</strong> ", format(results$mean_volume, big.mark = ","), " cm<sup>3</sup></li>",
"<li><strong>Volume SD:</strong> ", format(results$sd_volume, big.mark = ","), " cm<sup>3</sup></li>",
"<li><strong>Mean Coating Surface Area:</strong> ", format(results$mean_surface_area, big.mark = ","), " cm<sup>2</sup></li>",
"<li><strong>Surface Area SD:</strong> ", format(results$sd_surface_area, big.mark = ","), " cm<sup>2</sup></li>",
"<li><strong>99% Required Volume:</strong> ", format(results$volume_99, big.mark = ","), " cm<sup>3</sup></li>",
"<li><strong>99% Required Surface Area:</strong> ", format(results$surface_area_99, big.mark = ","), " cm<sup>2</sup></li>",
"</ul>"
)
)
})
output$volume_histogram <- renderPlot({
req(simulation_results())
hist(simulation_results()$volumes, main = "Distribution of Ice Cream Volume", xlab = "Volume (cm^3)", breaks = 30, col = "lightblue")
})
output$surface_area_histogram <- renderPlot({
req(simulation_results())
hist(simulation_results()$surface_areas, main = "Distribution of Coating Surface Area", xlab = "Surface Area (cm^2)", breaks = 30, col = "lightgreen")
})
})
}
# Main UI
ui <- fluidPage(
titlePanel("Enhanced Weather Forecast and Ice Cream Estimation App"),
tabsetPanel(
tabPanel("City 1", city_module_ui("city1")),
tabPanel("City 2", city_module_ui("city2")),
tabPanel("City 3", city_module_ui("city3"))
)
)
# Main Server
server <- function(input, output, session) {
city_module_server("city1", api_key)
city_module_server("city2", api_key)
city_module_server("city3", api_key)
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
install.packages("pkgdown")
install.packages("pkgdown")
setwd("D:/Ronald/Git/bpartyRonyLittle")
getwd()
pkgdown::init_site()
pkgdown::build_site()
